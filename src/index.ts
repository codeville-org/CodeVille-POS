import { app, BrowserWindow } from "electron";
import * as fs from "fs";
import * as path from "path";

import imageManager from "@/modules/image-manager";
import databaseManager from "./database";
import { setupIPCHandlers } from "./ipc/handlers";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Set up logging to file for packaged app
function setupLogging() {
  if (app.isPackaged) {
    // Create logs directory in user data
    const logsDir = path.join(app.getPath("userData"), "logs");
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
    }

    // Create log file with timestamp
    const logFile = path.join(
      logsDir,
      `app-${new Date().toISOString().replace(/:/g, "-")}.log`
    );

    const logStream = fs.createWriteStream(logFile, { flags: "a" });

    // Helper function to format log messages
    const formatLog = (type: string, ...args: any[]) => {
      const timestamp = new Date().toISOString();
      const message = args
        .map((arg) => {
          if (typeof arg === "object") {
            try {
              return JSON.stringify(arg, null, 2);
            } catch {
              return String(arg);
            }
          }
          return String(arg);
        })
        .join(" ");
      return `[${timestamp}] [${type}] ${message}\n`;
    };

    // Override console methods
    const originalConsoleLog = console.log;
    const originalConsoleError = console.error;
    const originalConsoleWarn = console.warn;
    const originalConsoleInfo = console.info;

    console.log = (...args: any[]) => {
      originalConsoleLog(...args);
      logStream.write(formatLog("LOG", ...args));
    };

    console.error = (...args: any[]) => {
      originalConsoleError(...args);
      logStream.write(formatLog("ERROR", ...args));
    };

    console.warn = (...args: any[]) => {
      originalConsoleWarn(...args);
      logStream.write(formatLog("WARN", ...args));
    };

    console.info = (...args: any[]) => {
      originalConsoleInfo(...args);
      logStream.write(formatLog("INFO", ...args));
    };

    // Log the log file location
    console.log(`=== Application Started ===`);
    console.log(`Log file location: ${logFile}`);
    console.log(`User data directory: ${app.getPath("userData")}`);
    console.log(`App version: ${app.getVersion()}`);
    console.log(`Electron version: ${process.versions.electron}`);
    console.log(`Node version: ${process.versions.node}`);
    console.log(`Platform: ${process.platform}`);
    console.log(`Architecture: ${process.arch}`);
    console.log("===========================");

    // Handle process errors
    process.on("uncaughtException", (error) => {
      console.error("Uncaught Exception:", error);
      logStream.write(
        formatLog("UNCAUGHT_EXCEPTION", error.message, error.stack)
      );
    });

    process.on("unhandledRejection", (reason, promise) => {
      console.error("Unhandled Rejection at:", promise, "reason:", reason);
      logStream.write(formatLog("UNHANDLED_REJECTION", reason));
    });

    // Clean up on app quit
    app.on("quit", () => {
      logStream.end();
    });

    return logFile;
  }
}

const createWindow = async (): Promise<void> => {
  // Initialize database before creating window
  try {
    await databaseManager.initialize();
    console.log("Database initialized successfully");

    // Initialize image manager
    await imageManager.initialize();
    console.log("Image manager initialized successfully");
  } catch (error) {
    console.error("Failed to initialize:", error);
    // app.quit();
    // return;
  }

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    frame: false,
    webPreferences: {
      sandbox: true,
      contextIsolation: true,
      nodeIntegration: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // Setup IPC handlers FIRST, before loading the window
  setupIPCHandlers(mainWindow);

  // Maximize the window immediately
  mainWindow.maximize();

  // Prevent the window from being unmaximized
  mainWindow.on("unmaximize", () => {
    mainWindow.maximize();
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools for debugging
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  const logFile = setupLogging();

  if (logFile) {
    console.log("Logging initialized for packaged app");
  }

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  // Close database connection
  databaseManager.close();

  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
